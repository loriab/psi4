#! test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule

from psi4.driver import qcdb


molkwargs1 = {
    'geom': [[0., 0., 0.], [1.4, 0., 0.], [-0.5, -0.7, 0.], [-0.5, 0.7, 0.]],
    'elem': ['C', 'O', 'H', 'h'],
    'units': 'Angstrom', 
    'input_units_to_au': 1.88972,
    'fix_com': True,
    'fix_orientation': True,
    'fix_symmetry': 'cS',
    }

molkwargs2 = {
    'geom': [[0., 0., 0.], [1.4, 0., 0.], [-0.5, -0.7, 0.], [-0.5, 0.7, 0.]],
    'elbl': ['C@12.5', 'O5', 'H_r', 'H_L'],
    'units': 'Bohr', 
    'fix_com': True,
    'fix_orientation': False,
    }

molkwargs3 = {
    'geom': [[0., 0., 0.], [1.4, 0., 0.], [-0.5, -0.7, 0.], [-0.5, 0.7, 0.]],
    'elbl': ['C1', 'O', '@H_r', 'Gh(H_L)'],
    'fix_com': False,
    'fix_orientation': True,
    }

molkwargs4 = {
    'geom': np.arange(9),
    'elez': [1, 2, 2],
    'real': [False, True, False],
    'molecular_charge': 1,
    'fragment_separators': [1, 2],
    }

def test_molrec(kwargs, label):
    #pdict = qcdb.molparse.from_arrays(**kwargs)
    #print('PDICT', pdict)
    #pmol = psi4.core.Molecule.from_dict(pdict)

    pmol, pdict = psi4.core.Molecule.from_arrays(**kwargs, return_dict=True)
    qmol, qdict = qcdb.Molecule.from_arrays(**kwargs, return_dict=True)
    tpdict = pmol.to_dict()
    tqdict = qmol.to_dict()
    #qmol.print_out()

    qcdb.compare_molrecs(pdict, tpdict,  4, label + ': from_dict P (ref) vs.   to_dict P')  #TEST
    qcdb.compare_molrecs(qdict, tqdict,  4, label + ': from_dict Q (ref) vs.   to_dict Q')  #TEST
    qcdb.compare_molrecs(pdict, qdict,   4, label + ': from_dict P (ref) vs. from_dict Q')  #TEST
    qcdb.compare_molrecs(tpdict, tqdict, 4, label + ':   to_dict P (ref) vs.   to_dict Q')  #TEST
    qcdb.compare_molrecs(pdict, tqdict,  4, label + ': from_dict P (ref) vs.   to_dict Q')  #TEST
    qcdb.compare_molrecs(tpdict, qdict,  4, label + ':   to_dict P (ref) vs. from_dict Q')  #TEST

    return pdict

mdict = test_molrec(molkwargs1, label='H2CO plain')

mdict = test_molrec(molkwargs2, label='H2CO labeled')

mdict = test_molrec(molkwargs3, label='H2CO ghosted')

mdict = test_molrec(molkwargs4, label='@H/He/@He')
compare_integers(1, mdict['molecular_charge'], '@H/He/@He: c')
compare_integers(2, mdict['molecular_multiplicity'], '@H/He/@He: m')
compare_integers(1, np.allclose(mdict['fragment_charges'], [0, 1, 0]), '@H/He/@He: fc')
compare_integers(1, np.allclose(mdict['fragment_multiplicities'], [1, 2, 1]), '@H/He/@He: fm')
